from fundamental import config
from fundamental import company_profiles as profiles
from fundamental import company_financials as financials
from fundamental import company_fundamentals as fundamentals

import pandas as pd


def prepare_company_profiles(price_filter, api_key):
    """
    Build company profiles for stock tickers that meet price and exchange requirements.
    Reference: https://financialmodelingprep.com/developer/docs/#Company-Profile

    :param price_filter: The minimum stock price a user is willing to consider
    :param api_key: FinancialModelingPrep API key
    :return: None
    """

    # Retrieve all available stock tickers from the FMP API
    data = profiles.get_company_data(api_key)
    # Drop rows with 1 or more null values (cols: "symbol", "name", "price", "exchange")
    data.dropna(axis=0, how='any', inplace=True)
    # Only retain stocks listed on major exchanges
    data = profiles.select_stock_exchanges(data)
    # Only retain stocks with a price greater than or equal to the provided price filter
    data = profiles.select_minimum_price(data, price_filter)
    # Retrieve company profile data for remaining stock tickers
    profiles.create_company_profile(data, api_key)

    return None


def get_company_financials(file_path, request_list, review_period, report_year, eval_period,
                           dir_path, api_key):
    """
    Retrieve, clean, subset, and store company financial data in the specified directory.

    :param file_path: File path to company profile data generated by the function above
    :param request_list: List of financial data to request from the FMP API
    :param review_period: Frequency of financial statements - 'annual' or 'quarter'
    :param report_year: Year of most recent financial report desired
    :param eval_period: Number of years prior to most recent report to be analyzed (max = 10)
    :param dir_path: Directory path where csv files should be stored
    :param api_key: FinancialModelingPrep API key
    :return: None
    """

    # Read in company profile data generated by the function above
    company_profiles = pd.read_csv(file_path)
    # Subset DataFrame to companies in the provided sectors (*args)
    sector_companies = financials.select_sector(company_profiles, 'Consumer Cyclical')

    for request in request_list:
        # Retrieve financial data described in the list above on an annual or quarterly basis
        raw_data = financials.get_financial_data(sector_companies, request, review_period, api_key)
        # Remove rows with corrupted date values, create new year column
        clean_data = financials.clean_financial_data(raw_data)
        # Subset financial data to the date range provided
        subset_data = financials.select_analysis_years(clean_data, report_year, eval_period)
        # Save financial data to data directory for further analysis
        evaluation_period = subset_data.year.max() - subset_data.year.min()
        filename = dir_path + request + '-' + str(evaluation_period) + 'Y' + '.csv'
        subset_data.to_csv(filename, index=False, header=True)

    return None


def screen_stocks(dir_path, year_pattern, stat, col_list, report_year, eval_period, criteria):
    """
    Read financial data, calculate performance stats, and screen stocks accordingly.

    :param dir_path: Path to directory that contains csv files to be read in
    :param year_pattern: File name pattern indicating how many years of historical data the csv
           file should include
    :param stat: Statistic to calculate on col in col_list ('mean', 'median', or 'percent change')
    :param col_list: List of columns to calculate statistics for
    :param report_year: Year of most recent financial report desired
    :param eval_period: Number of years prior to most recent report to be analyzed (max = 10)
    :param criteria: Dictionary containing the column name and quantitative range desired for
           that column
    :return: Subset of financial_data, containing only qualified stocks
    :rtype: pandas.DataFrame
    """

    # Read and join all csv files in the provided directory that match a specific pattern, ex: '10Y'
    financial_data = fundamentals.combine_data(dir_path, year_pattern)
    # Subset DataFrame to the trailing twelve months of data for screening purposes
    ttm_data = financial_data[financial_data.year == report_year]

    # Calculate the N-YEAR mean, median, or percent change of a given set of columns
    for col in col_list:
        performance_stats = fundamentals.calculate_stats(financial_data, stat, report_year,
                                                         eval_period, col)
        ttm_data = ttm_data.merge(performance_stats, on=['symbol', 'year'], how='inner')

    # Subset DataFrame to stocks that meet the specified criteria
    qualified_companies = fundamentals.screen_stocks(ttm_data, **criteria)
    qualified_company_financials = financial_data[financial_data['symbol'].isin(qualified_companies)]

    return qualified_company_financials


def plot_stock_performance(df, report_year, eval_period):
    """
    Plot the historical performance of selected stock tickers.

    :param df: DataFrame containing stock tickers to include in line graphs
    :param report_year: Year of most recent financial report desired
    :param eval_period: Number of years prior to most recent report to be analyzed (max = 10)
    :return: A list of ggplot objects
    :rtype: List
    """

    historical_performance_plots = fundamentals.plot_performance(df, report_year, eval_period)

    return historical_performance_plots


    # # Everything below - calculate_intrinsic_value
    # long_term_growth_estimates = {'DLB': 0.06}
    #
    # valuation_data = fundamentals.prepare_valuation_inputs(financial_data, report_year, eval_period,
    #                                                        'DLB')
    #
    # dcf_model_steps = [fundamentals.calculate_discount_rate,
    #                    fundamentals.calculate_discounted_free_cash_flow,
    #                    fundamentals.calculate_terminal_value,
    #                    fundamentals.calculate_intrinsic_value,
    #                    fundamentals.calculate_margin_of_safety]
    #
    # for step in dcf_model_steps:
    #     if step == fundamentals.calculate_discounted_free_cash_flow:
    #         valuation_data = step(valuation_data, 10, **long_term_growth_estimates)
    #     else:
    #         valuation_data = step(valuation_data)
    #
    # print(valuation_data)


if __name__ == '__main__':

    prepare_company_profiles(10.00, config.api_key)

    financial_requests = ['financials', 'financial-ratios', 'financial-statement-growth',
                          'company-key-metrics', 'enterprise-value']

    get_company_financials('data/company-profiles.csv', financial_requests, 'annual', 2019, 10,
                           'data/', config.api_key)

    columns_to_analyze = ['roe', 'currentRatio']

    screening_criteria = {'debtToEquity': [0, 0.5],
                          'currentRatio': [1.5, 10.0],
                          'roe': [0.10, 0.50],
                          '10Y roe median': [0.08, 0.25],
                          'interestCoverage': [15, 5000]}

    screened_stocks = screen_stocks('data/', '10Y', 'median', columns_to_analyze, 2019, 10,
                                    screening_criteria)

    # Returns list of ggplot objects, add optional for loop to inspect graphs
    stability_graphs = plot_stock_performance(screened_stocks, 2019, 10)
